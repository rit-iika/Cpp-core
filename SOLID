solid principles:

1. The Single Responsibility Principle
	The Single Responsibility Principle states that a class should do one thing and therefore it should have only a single reason to change.
	Most of the time it happens that when programmers have to add features or new behavior they implement everything into the existing class which is completely wrong. It makes their code lengthy, complex and consumes time when later something needs to be modified. Use layers in your application and break God classes into smaller classes or modules.
2. Open/Closed Principle
	The Open-Closed Principle requires that classes should be open for extension and closed to modification.

	Modification means changing the code of an existing class, and extension means adding new functionality.

	So what this principle wants to say is: We should be able to add new functionality without touching the existing code for the class. 
	his is because whenever we modify the existing code, we are taking the risk of creating potential bugs. So we should avoid touching the tested and reliable (mostly) production code if possible
